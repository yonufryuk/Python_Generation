# Метод insert() позволяет вставлять значение в список в заданной позиции.
# В него передается два аргумента:
# index: индекс, задающий место вставки значения;
# value: значение, которое требуется вставить.
# программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# print(names)
# names.insert(0, 'Anders')
# print(names)
# names.insert(3, 'Josef')
# print(names)
# выведет:
# ['Gvido', 'Roman' , 'Timur']
# ['Anders', 'Gvido', 'Roman' , 'Timur']
# ['Anders', 'Gvido', 'Roman' , 'Josef', 'Timur']

# Метод index() возвращает индекс первого элемента, значение которого равняется переданному
# в метод значению. Таким образом, в метод передается один параметр:
# value: значение, индекс которого требуется найти.
# программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# position = names.index('Timur')
# print(position)
# выведет:
# 2
# программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# position = names.index('Anders')
# print(position)
# приводит к ошибке:
# ValueError: 'Anders' is not in list
# Чтобы избежать таких ошибок, можно использовать метод index() вместе с оператором принадлежности in:
# names = ['Gvido', 'Roman' , 'Timur']
# if 'Anders' in names:
#     position = names.index('Anders')
#     print(position)
# else:
#     print('Такого значения нет в списке')

# Метод remove() удаляет первый элемент, значение которого равняется переданному в метод значению. В метод передается один параметр:
# value: значение, которое требуется удалить.
# Метод уменьшает размер списка на один элемент. Все элементы после удаленного элемента смещаются на одну позицию к началу списка. Если элемент в списке не найден, то во время выполнения происходит ошибка.
# Следующий программный код:
# food = ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
# print(food)
# food.remove('Рис')
# print(food)
# выведет:
# ['Рис', 'Курица', 'Рыба', 'Брокколи', 'Рис']
# ['Курица', 'Рыба', 'Брокколи', 'Рис']

# Метод pop() удаляет элемент по указанному индексу и возвращает его. В метод pop() передается один необязательный аргумент:
# index: индекс элемента, который требуется удалить.
# Если индекс не указан, то метод удаляет и возвращает последний элемент списка. Если список пуст или указан индекс за пределами диапазона, то во время выполнения происходит ошибка.
# Следующий программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# item = names.pop(1)
# print(item)
# print(names)
# выведет:
# Roman
# ['Gvido', 'Timur']

# Метод count() возвращает количество элементов в списке, значения которых равны переданному в метод значению.
# Таким образом, в метод передается один параметр:
# value: значение, количество элементов, равных которому,  нужно посчитать.
# Если значение в списке не найдено, то метод возвращает 0.
# Следующий программный код:
# names = ['Timur', 'Gvido', 'Roman', 'Timur', 'Anders', 'Timur']
# cnt1 = names.count('Timur')
# cnt2 = names.count('Gvido')
# cnt3 = names.count('Josef')
# print(cnt1)
# print(cnt2)
# print(cnt3)
# выведет:
# 3
# 1
# 0

# Метод reverse() инвертирует порядок следования значений в списке, то есть меняет его на противоположный.
# Следующий программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# names.reverse()
# print(names)
# выведет:
# ['Timur', 'Roman', 'Gvido']
# Существует большая разница между вызовом метода names.reverse() и использованием
# среза names[::-1]. Метод reverse() меняет порядок элементов на обратный в текущем списке,
# а срез создает копию списка, в котором элементы следуют в обратном порядке.

# Метод clear() удаляет все элементы из списка.
# Следующий программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# names.clear()
# print(names)
# выведет:
# []

# Метод copy() создает поверхностную копию списка.
# Следующий программный код:
# names = ['Gvido', 'Roman' , 'Timur']
# names_copy = names.copy()              # создаем поверхностную копию списка names
# print(names)
# print(names_copy)
# выведет:
# ['Gvido', 'Roman', 'Timur']
# ['Gvido', 'Roman', 'Timur']
# Аналогичного результата можно достичь с помощью срезов или функции list():
# names = ['Gvido', 'Roman' , 'Timur']
# names_copy1 = list(names)             # создаем поверхностную копию с помощью функции list()
# names_copy2 = names[:]                # создаем поверхностную копию с помощью среза от начала до конца

# Дополните приведенный код, чтобы он:
# Заменил второй элемент списка на 17;
# Добавил числа 4, 5 и 6 в конец списка;
# Удалил первый элемент списка;
# Удвоил список;
# Вставил число 25 по индексу 3;
# Вывел список, с помощью функции print()
# numbers = [8, 9, 10, 11]
# numbers[1] = 17
# numbers.extend([4, 5, 6])
# del numbers[0]
# numbers *= 2
# numbers.insert(3, 25)
# print(numbers)

# подается строка текста, содержащая различные натуральные числа.
# Из данной строки формируется список чисел. Напишите программу,
# которая меняет местами минимальный и максимальный элемент этого списка
# listt = [int(i) for i in input().split()]
# x = listt.index(min(listt))
# y = listt.index(max(listt))
# listt[x], listt[y] = max(listt), min(listt)
# print(*listt)

# подается строка, содержащая английский текст.
# Напишите программу, которая подсчитывает общее количество артиклей: 'a', 'an', 'the'.
# st = input().lower().split()
# total = st.count('a') + st.count('an') + st.count('the')
# print('Общее количество артиклей:', total)

# Нужно вывести те же строки, но удалить комментарии и символы пустого пространства в конце строк.
# Пустую строку вместо первой строки ввода выводить не надо
# n = input()
# for _ in range(int(n[1:])):
#     s = input()
#     if '#' in s:
#         s = s[:s.find('#')]
#     print(s.rstrip())

# В Python списки имеют встроенный метод sort(), который сортирует элементы списка по
# возрастанию или убыванию.
# Следующий программный код:
# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# a.sort()
# print('Отсортированный список:', a)
# выведет:
# Отсортированный список: [-67, -3, -2, 0, 1, 6, 7, 8, 9, 12, 34, 45, 99, 1000]
# Следующий программный код:
# a = [1, 7, -3, 9, 0, -67, 34, 12, 45, 1000, 6,  8, -2, 99]
# a.sort(reverse = True)   # сортируем по убыванию
# print('Отсортированный список:', a)
# выведет:
# Отсортированный список: [1000, 99, 45, 34, 12, 9, 8, 7, 6, 1, 0, -2, -3, -67]
# можно сортировать списки содержащие не только числа, но и строки
# a = ['бета', 'альфа', 'дельта', 'гамма']
# a.sort()
# print ('Отсортированный список:', a)
# выведет:
# Отсортированный список: ['альфа', 'бета', 'гамма', 'дельта']

# numbers = [4, 2, 8, 6, 5, 3, 10, 4, 100, 1, -7]
# numbers.sort()
# del numbers[0]
# del numbers[-1]
# numbers.sort(reverse=True)
# print(numbers)

# программе подается строка текста, содержащая целые числа.
# Из данной строки формируется список чисел. Напишите программу,
# которая сортирует и выводит данный список сначала по возрастанию, а затем по убыванию.
# n = input().split()   #считываем данные
# for i in range(len(n)):     #запускаем цикл
#     n[i] = int(n[i])        #преобразуем строковые данные в цифровые
# n.sort()              #сортируем список
# print(*n)             #выводим на печать 1-ую строку
# n.sort(reverse=True)  #переворачиваем отсортированный список
# print(*n)             #выводим на печать 2-ую строку
