# Напишите функцию convert_to_miles(km), которая принимает в качестве
# аргумента расстояние в километрах и возвращает расстояние в милях.
# Формула для преобразования: мили = километры * 0.6214.
# # объявление функции
# def convert_to_miles(km):
#     return km * 0.6214
#
# # считываем данные
# num = int(input())
#
# # вызываем функцию
# print(convert_to_miles(num))

# Напишите функцию get_days(month), которая принимает в качестве аргумента
# номер месяца и возвращает количество дней в данном месяце.
# # объявление функции
# def get_days(month):
#     if month in [4, 6, 9, 11]:
#         return 30
#     elif month == 2:
#         return 28
#     else:
#         return 31
#
#
# # считываем данные
# num = int(input())
#
# # вызываем функцию
# print(get_days(num))

# Напишите функцию get_factors(num), принимающую в качестве аргумента натуральное
# число и возвращающую список всех делителей данного числа.
# объявление функции
# def get_factors(num):
#     r = []
#     for i in range(1, int(num / 2) + 1):
#         if num % i == 0:
#             r.append(i)
#     r.append(num)
#     return r
#
# # считываем данные
# n = int(input())
#
# # вызываем функцию
# print(get_factors(n))


# Напишите функцию number_of_factors(num), принимающую в качестве аргумента число и
# возвращающую количество делителей данного числа.
# объявление функции
# def get_factors(num):
#     r = []
#     for i in range(1, int(num / 2) + 1):
#         if num % i == 0:
#             r.append(i)
#     r.append(num)
#     x = len(r)
#     return x
# # считываем данные
# n = int(input())
# # вызываем функцию
# print(get_factors(n))


# Напишите функцию с именем find_all(target, symbol), которая принимает два аргумента:
# строку target и символ symbol и возвращает список, содержащий все местоположения
# этого символа в строке.
# # объявление функции
# def find_all(target, symbol):
#     return [x for x in range(len(target)) if target[x] == symbol]
#
# # считываем данные
# s = input()
# char = input()
#
# # вызываем функцию
# print(find_all(s, char))


# Напишите функцию merge(list1, list2), которая принимает в качестве аргументов два
# отсортированных по возрастанию списка, состоящих из целых чисел, и объединяет их в
# один отсортированный список.
# # объявление функции
# def merge(list1, list2):
#     return sorted(list1 + list2)
#
# # считываем данные
# numbers1 = [int(c) for c in input().split()]
# numbers2 = [int(c) for c in input().split()]
#
# # вызываем функцию
# print(merge(numbers1, numbers2))


# Быстрое слияние двух отсортированных списков в один
# Пусть мы имеем два уже отсортированных по возрастанию списка list1 и list2.
#
# Алгоритм быстрого слияния следующий:
#
# Создаем численные указатели p1 = 0 и p2 = 0 на начала обоих списков list1 и list2 соответственно;
# На каждом шаге берем меньший из двух элементов list1[p1] и list2[p2];
# Записываем его в результирующий список;
# Увеличиваем указатель на первый элемент списка (p1 или p2) из которого был взят элемент на 11;
# Когда один из начальных списков закончился, добавляем все оставшиеся элементы второго списка в результирующий список.
# def quick_merge(list1, list2):
#     result = []
#
#     p1 = 0  # указатель на первый элемент списка list1
#     p2 = 0  # указатель на первый элемент списка list2
#
#     while p1 < len(list1) and p2 < len(list2):  # пока не закончился хотя бы один список
#         if list1[p1] <= list2[p2]:
#             result.append(list1[p1])
#             p1 += 1
#         else:
#             result.append(list2[p2])
#             p2 += 1
#
#     if p1 < len(list1):   # прицепление остатка
#         result += list1[p1:]
#     if p2 < len(list2):
#         result += list2[p2:]
#
#     return result


# Merge lists 2
# На вход программе подается число nn, а затем nn строк, содержащих целые числа в порядке
# возрастания. Из данных строк формируются списки чисел. Напишите программу, которая объединяет
# указанные списки в один отсортированный список с помощью функции quick_merge(), а затем
# выводит его.
# n=int(input())
# def quick_merge(n):
#     return sorted([int(i) for i in range(n) for i in input().split()])
# print(*quick_merge(n))